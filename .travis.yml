language: cpp
os: linux
dist: bionic

addons:
  apt:
    sources:
    - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main'
      key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
    - sourceline: 'ppa:ubuntu-toolchain-r/test'
    packages:
      - qt5-default
      - libboost-all-dev
      - lcov
      - gcovr
      - clang-10
      - clang-format-10
      - clang-tidy-10
      - cmake
      - llvm-10
      - doxygen

env:
  global:
    - MAKEFLAGS="-j2"

jobs:
  include:
    - stage: Test
      compiler: gcc
      before_script: ./scripts/setup_build.sh -DCMAKE_BUILD_TYPE=Coverage
      script:
        - ./scripts/build.sh
        - ./scripts/test_coverage.sh
      after_success: ./scripts/upload_coverage.sh
      # coverage generation with clang does not work because of version missmatch
    - compiler: clang
      before_script: ./scripts/setup_build.sh -DCMAKE_BUILD_TYPE=Debug
      script:
        - ./scripts/build.sh
        - ./scripts/test.sh
    - name: AddressSanitizer
      env:
      - CC=clang-10
      - CXX=clang++-10
      - ASAN_SYMBOLIZER_PATH=/usr/lib/llvm-10/bin/llvm-symbolizer
      before_script: ./scripts/setup_build.sh -DCMAKE_BUILD_TYPE=asan
      script:
        - ./scripts/test.sh "~[leaks]~[hide]"
    - name: UndefinedBehaviourSanitizer
      env:
      - CC=clang-10
      - CXX=clang++-10
      before_script: ./scripts/setup_build.sh -DCMAKE_BUILD_TYPE=ubsan
      script:
        - ./scripts/test.sh
    - name: MemorySanitizer
      env:
      - CC=clang-10
      - CXX=clang++-10
      before_script: ./scripts/setup_build.sh -DCMAKE_BUILD_TYPE=msan
      script:
        - ./scripts/test.sh
      # has some false positives in catch2
      allow_failure: true
    - name: bench
      compiler: clang
      before_script: ./scripts/setup_build.sh -DCMAKE_BUILD_TYPE=Release
      script:
        - ./scripts/build.sh
        - |
          ./scripts/bench.sh \
            --benchmark-samples=10 \
            --benchmark-warmup-time=0 \
          && echo "DON'T RELY ON THESE PERFORMANCE NUMBERS"
    - name: Linting
      env:
      - CC=clang-10
      - CXX=clang++-10
      - CLANG_TIDY=clang-tidy-10
      before_script: ./scripts/setup_build.sh
      script: ./scripts/lint.sh --warnings-as-errors='*' 2>&1 >/dev/null || echo "Linter failed please run locally."
      allow_failure: true
    - name: Check code format
      env:
      - CC=clang-10
      - CXX=clang++-10
      - CLANG_FORMAT=clang-format-10
      before_script: ./scripts/setup_build.sh
      script: ./scripts/check_format.sh -ferror-limit=1 --dry-run
      allow_failure: true

    - stage: Deploy
      name: Docs
      before_script: ./scripts/setup_build.sh
      script: ./scripts/docs.sh
      deploy:
        provider: pages
        skip_cleanup: true
        github_token: $GITHUB_TOKEN
        on:
          branch: master
        target_branch: gh-pages
        local_dir: /build/docs/html

